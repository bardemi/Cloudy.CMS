@using Cloudy.CMS.ContentTypeSupport
@using Cloudy.CMS.EntitySupport.Reference
@using Cloudy.CMS.UI.FormSupport
@using System.Linq
@using Cloudy.CMS.UI.FormSupport.FieldTypes
@using System.Text.Json
@using System.Runtime.CompilerServices
@model FieldViewModel

@inject IContentTypeProvider ContentTypeProvider
@inject IReferenceSerializer ReferenceSerializer

@{
    var controlName = Model.Field.Name;

    var selectAttribute = Model.Property.Attributes.OfType<SelectAttribute>().FirstOrDefault();

    if (selectAttribute == null)
    {
        throw new Exception($"The property {Model.Field.Name} on type {Model.Field.Type} does not have a [Select] attribute that specifies Type. How come you are using this partial?");
    }

    var type = ContentTypeProvider.Get(selectAttribute.Type);

    if (type == null)
    {
        throw new Exception($"The [Select] attribute on property {Model.Field.Name} on type {Model.Field.Type} specifies the type {selectAttribute.Type}, which is not an instance type tracked by Cloudy.");
    }

    var contentType = type.Name;
    var pageSize = 10;

    var value = Model.Value;

    if(Model.Field.Type.IsValueType && value != null && value.Equals(Activator.CreateInstance(value.GetType()))){
        value = null;
    }

    value = ReferenceSerializer.Get(value);

    var simpleKey = Model.Field.Type.IsValueType && !Model.Field.Type.IsAssignableTo(typeof(ITuple));
}

<div class="select-one-control" settings="@(JsonSerializer.Serialize(new { controlName, contentType, pageSize, value, simpleKey }))"></div>